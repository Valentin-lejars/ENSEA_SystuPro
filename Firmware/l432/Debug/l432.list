
l432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080025c4  080025c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025c4  080025c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c8  080025c8  000125c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080025cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  080025d0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080025d0  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007d93  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e9  00000000  00000000  00027e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  000296f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f5  00000000  00000000  0002a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b8e5  00000000  00000000  0002a765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000085f0  00000000  00000000  0004604a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092451  00000000  00000000  0004e63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000253c  00000000  00000000  000e0a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e2fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800254c 	.word	0x0800254c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	0800254c 	.word	0x0800254c

080001cc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	f043 0201 	orr.w	r2, r3, #1
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	601a      	str	r2, [r3, #0]
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr

080001ec <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6a1a      	ldr	r2, [r3, #32]
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	431a      	orrs	r2, r3
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	621a      	str	r2, [r3, #32]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr

0800020e <LedStart>:

#include "Led.h"



void LedStart(void) {
 800020e:	b580      	push	{r7, lr}
 8000210:	af00      	add	r7, sp, #0
    LL_TIM_EnableCounter(TIM2);
 8000212:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000216:	f7ff ffd9 	bl	80001cc <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 800021a:	2110      	movs	r1, #16
 800021c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000220:	f7ff ffe4 	bl	80001ec <LL_TIM_CC_EnableChannel>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}

08000228 <LL_TIM_EnableCounter>:
{
 8000228:	b480      	push	{r7}
 800022a:	b083      	sub	sp, #12
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	f043 0201 	orr.w	r2, r3, #1
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <TimeBaseStartIT>:
 */


#include "TimeBase.h"

void TimeBaseStartIT(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	TIM15 -> DIER |= TIM_DIER_UIE;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <TimeBaseStartIT+0x1c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <TimeBaseStartIT+0x1c>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	60d3      	str	r3, [r2, #12]
	LL_TIM_EnableCounter(TIM15);
 8000258:	4802      	ldr	r0, [pc, #8]	; (8000264 <TimeBaseStartIT+0x1c>)
 800025a:	f7ff ffe5 	bl	8000228 <LL_TIM_EnableCounter>
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40014000 	.word	0x40014000

08000268 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000274:	4907      	ldr	r1, [pc, #28]	; (8000294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4313      	orrs	r3, r2
 800027a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800027e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4013      	ands	r3, r2
 8000284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000286:	68fb      	ldr	r3, [r7, #12]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	40021000 	.word	0x40021000

08000298 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	463b      	mov	r3, r7
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
 80002ac:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80002ae:	2004      	movs	r0, #4
 80002b0:	f7ff ffda 	bl	8000268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ffd7 	bl	8000268 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80002ba:	2002      	movs	r0, #2
 80002bc:	f7ff ffd4 	bl	8000268 <LL_AHB2_GRP1_EnableClock>

  /**/
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80002c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80002c6:	2302      	movs	r3, #2
 80002c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80002ca:	2303      	movs	r3, #3
 80002cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 80002d6:	2303      	movs	r3, #3
 80002d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80002da:	463b      	mov	r3, r7
 80002dc:	4619      	mov	r1, r3
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f001 f879 	bl	80013d8 <LL_GPIO_Init>

}
 80002e6:	bf00      	nop
 80002e8:	3718      	adds	r7, #24
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	f003 0307 	and.w	r3, r3, #7
 80002fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <__NVIC_SetPriorityGrouping+0x44>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000306:	68ba      	ldr	r2, [r7, #8]
 8000308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800030c:	4013      	ands	r3, r2
 800030e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000318:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800031c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000322:	4a04      	ldr	r2, [pc, #16]	; (8000334 <__NVIC_SetPriorityGrouping+0x44>)
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	60d3      	str	r3, [r2, #12]
}
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <LL_RCC_LSE_Enable+0x20>)
 800033e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <LL_RCC_LSE_Enable+0x20>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800036a:	f023 0218 	bic.w	r2, r3, #24
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4313      	orrs	r3, r2
 8000374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <LL_RCC_LSE_IsReady+0x24>)
 800038e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000392:	f003 0302 	and.w	r3, r3, #2
 8000396:	2b02      	cmp	r3, #2
 8000398:	d101      	bne.n	800039e <LL_RCC_LSE_IsReady+0x16>
 800039a:	2301      	movs	r3, #1
 800039c:	e000      	b.n	80003a0 <LL_RCC_LSE_IsReady+0x18>
 800039e:	2300      	movs	r3, #0
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000

080003b0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <LL_RCC_MSI_Enable+0x1c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <LL_RCC_MSI_Enable+0x1c>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <LL_RCC_MSI_IsReady+0x20>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f003 0302 	and.w	r3, r3, #2
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d101      	bne.n	80003e4 <LL_RCC_MSI_IsReady+0x14>
 80003e0:	2301      	movs	r3, #1
 80003e2:	e000      	b.n	80003e6 <LL_RCC_MSI_IsReady+0x16>
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40021000 	.word	0x40021000

080003f4 <LL_RCC_MSI_EnablePLLMode>:
  *       ready
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_EnablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnablePLLMode(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6013      	str	r3, [r2, #0]
}
 8000404:	bf00      	nop
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000

08000414 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000418:	4b05      	ldr	r3, [pc, #20]	; (8000430 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800041e:	f043 0308 	orr.w	r3, r3, #8
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <LL_RCC_MSI_SetRange+0x24>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000444:	4904      	ldr	r1, [pc, #16]	; (8000458 <LL_RCC_MSI_SetRange+0x24>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	600b      	str	r3, [r1, #0]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000464:	4b07      	ldr	r3, [pc, #28]	; (8000484 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	021b      	lsls	r3, r3, #8
 8000470:	4904      	ldr	r1, [pc, #16]	; (8000484 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000472:	4313      	orrs	r3, r2
 8000474:	604b      	str	r3, [r1, #4]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <LL_RCC_SetSysClkSource+0x24>)
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	f023 0203 	bic.w	r2, r3, #3
 8000498:	4904      	ldr	r1, [pc, #16]	; (80004ac <LL_RCC_SetSysClkSource+0x24>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	608b      	str	r3, [r1, #8]
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40021000 	.word	0x40021000

080004b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <LL_RCC_GetSysClkSource+0x18>)
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	f003 030c 	and.w	r3, r3, #12
}
 80004bc:	4618      	mov	r0, r3
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40021000 	.word	0x40021000

080004cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80004dc:	4904      	ldr	r1, [pc, #16]	; (80004f0 <LL_RCC_SetAHBPrescaler+0x24>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4313      	orrs	r3, r2
 80004e2:	608b      	str	r3, [r1, #8]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	40021000 	.word	0x40021000

080004f4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000504:	4904      	ldr	r1, [pc, #16]	; (8000518 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4313      	orrs	r3, r2
 800050a:	608b      	str	r3, [r1, #8]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000

0800051c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000524:	4b06      	ldr	r3, [pc, #24]	; (8000540 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800052c:	4904      	ldr	r1, [pc, #16]	; (8000540 <LL_RCC_SetAPB2Prescaler+0x24>)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4313      	orrs	r3, r2
 8000532:	608b      	str	r3, [r1, #8]
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000

08000544 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <LL_RCC_PLL_Enable+0x1c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <LL_RCC_PLL_Enable+0x1c>)
 800054e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000552:	6013      	str	r3, [r2, #0]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <LL_RCC_PLL_IsReady+0x24>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000574:	d101      	bne.n	800057a <LL_RCC_PLL_IsReady+0x16>
 8000576:	2301      	movs	r3, #1
 8000578:	e000      	b.n	800057c <LL_RCC_PLL_IsReady+0x18>
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800059c:	68da      	ldr	r2, [r3, #12]
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80005a0:	4013      	ands	r3, r2
 80005a2:	68f9      	ldr	r1, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	4311      	orrs	r1, r2
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	0212      	lsls	r2, r2, #8
 80005ac:	4311      	orrs	r1, r2
 80005ae:	683a      	ldr	r2, [r7, #0]
 80005b0:	430a      	orrs	r2, r1
 80005b2:	4904      	ldr	r1, [pc, #16]	; (80005c4 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80005b4:	4313      	orrs	r3, r2
 80005b6:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80005b8:	bf00      	nop
 80005ba:	3714      	adds	r7, #20
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	f9ff808c 	.word	0xf9ff808c

080005cc <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80005d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80005f8:	4907      	ldr	r1, [pc, #28]	; (8000618 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000602:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4013      	ands	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800060a:	68fb      	ldr	r3, [r7, #12]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000

0800061c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <LL_APB2_GRP1_EnableClock+0x2c>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000632:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4013      	ands	r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800063a:	68fb      	ldr	r3, [r7, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	40021000 	.word	0x40021000

0800064c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LL_FLASH_SetLatency+0x24>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f023 0207 	bic.w	r2, r3, #7
 800065c:	4904      	ldr	r1, [pc, #16]	; (8000670 <LL_FLASH_SetLatency+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	600b      	str	r3, [r1, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	40022000 	.word	0x40022000

08000674 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <LL_FLASH_GetLatency+0x18>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f003 0307 	and.w	r3, r3, #7
}
 8000680:	4618      	mov	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	600b      	str	r3, [r1, #0]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40007000 	.word	0x40007000

080006b8 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <LL_PWR_EnableBkUpAccess+0x1c>)
 80006c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40007000 	.word	0x40007000

080006d8 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <LL_PWR_IsActiveFlag_VOS+0x24>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006e8:	d101      	bne.n	80006ee <LL_PWR_IsActiveFlag_VOS+0x16>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <LL_PWR_IsActiveFlag_VOS+0x18>
 80006ee:	2300      	movs	r3, #0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40007000 	.word	0x40007000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff89 	bl	800061c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800070a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800070e:	f7ff ff6d 	bl	80005ec <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000712:	2003      	movs	r0, #3
 8000714:	f7ff fdec 	bl	80002f0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f810 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff fdbc 	bl	8000298 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000720:	f000 fb5c 	bl	8000ddc <MX_TIM2_Init>
  MX_SPI1_Init();
 8000724:	f000 f8be 	bl	80008a4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000728:	f000 fc8e 	bl	8001048 <MX_USART1_UART_Init>
  MX_TIM15_Init();
 800072c:	f000 fbda 	bl	8000ee4 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  LedStart(); // Démarre le timer pour activer la PWM
 8000730:	f7ff fd6d 	bl	800020e <LedStart>
  TimeBaseStartIT();
 8000734:	f7ff fd88 	bl	8000248 <TimeBaseStartIT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x38>
	...

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000740:	2001      	movs	r0, #1
 8000742:	f7ff ff83 	bl	800064c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000746:	bf00      	nop
 8000748:	f7ff ff94 	bl	8000674 <LL_FLASH_GetLatency>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1fa      	bne.n	8000748 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000752:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000756:	f7ff ff9b 	bl	8000690 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800075a:	bf00      	nop
 800075c:	f7ff ffbc 	bl	80006d8 <LL_PWR_IsActiveFlag_VOS>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d1fa      	bne.n	800075c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8000766:	f7ff fe23 	bl	80003b0 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800076a:	bf00      	nop
 800076c:	f7ff fe30 	bl	80003d0 <LL_RCC_MSI_IsReady>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d1fa      	bne.n	800076c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000776:	f7ff fe4d 	bl	8000414 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800077a:	2060      	movs	r0, #96	; 0x60
 800077c:	f7ff fe5a 	bl	8000434 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff fe6b 	bl	800045c <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 8000786:	f7ff ff97 	bl	80006b8 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fde6 	bl	800035c <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8000790:	f7ff fdd2 	bl	8000338 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8000794:	bf00      	nop
 8000796:	f7ff fdf7 	bl	8000388 <LL_RCC_LSE_IsReady>
 800079a:	4603      	mov	r3, r0
 800079c:	2b01      	cmp	r3, #1
 800079e:	d1fa      	bne.n	8000796 <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 80007a0:	f7ff fe28 	bl	80003f4 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	2210      	movs	r2, #16
 80007a8:	2100      	movs	r1, #0
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff feee 	bl	800058c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80007b0:	f7ff ff0c 	bl	80005cc <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80007b4:	f7ff fec6 	bl	8000544 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007b8:	bf00      	nop
 80007ba:	f7ff fed3 	bl	8000564 <LL_RCC_PLL_IsReady>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d1fa      	bne.n	80007ba <SystemClock_Config+0x7e>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fe5f 	bl	8000488 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007ca:	bf00      	nop
 80007cc:	f7ff fe70 	bl	80004b0 <LL_RCC_GetSysClkSource>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b0c      	cmp	r3, #12
 80007d4:	d1fa      	bne.n	80007cc <SystemClock_Config+0x90>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff fe78 	bl	80004cc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fe89 	bl	80004f4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007e2:	2000      	movs	r0, #0
 80007e4:	f7ff fe9a 	bl	800051c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(32000000);
 80007e8:	4803      	ldr	r0, [pc, #12]	; (80007f8 <SystemClock_Config+0xbc>)
 80007ea:	f001 fe65 	bl	80024b8 <LL_Init1msTick>

  LL_SetSystemCoreClock(32000000);
 80007ee:	4802      	ldr	r0, [pc, #8]	; (80007f8 <SystemClock_Config+0xbc>)
 80007f0:	f001 fe70 	bl	80024d4 <LL_SetSystemCoreClock>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	01e84800 	.word	0x01e84800

080007fc <LL_AHB2_GRP1_EnableClock>:
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000806:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000808:	4907      	ldr	r1, [pc, #28]	; (8000828 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4313      	orrs	r3, r2
 800080e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4013      	ands	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <LL_APB2_GRP1_EnableClock>:
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000838:	4907      	ldr	r1, [pc, #28]	; (8000858 <LL_APB2_GRP1_EnableClock+0x2c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4313      	orrs	r3, r2
 800083e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000842:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4013      	ands	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40021000 	.word	0x40021000

0800085c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f023 0210 	bic.w	r2, r3, #16
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	431a      	orrs	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000882:	b480      	push	{r7}
 8000884:	b083      	sub	sp, #12
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f043 0208 	orr.w	r2, r3, #8
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	605a      	str	r2, [r3, #4]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
	...

080008a4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b090      	sub	sp, #64	; 0x40
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 fe1e 	bl	80024f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
 80008c6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80008c8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80008cc:	f7ff ffae 	bl	800082c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ff93 	bl	80007fc <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA1   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80008d6:	23c2      	movs	r3, #194	; 0xc2
 80008d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008da:	2302      	movs	r3, #2
 80008dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80008ea:	2305      	movs	r3, #5
 80008ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	463b      	mov	r3, r7
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 fd6f 	bl	80013d8 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80008fe:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000902:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8000904:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000908:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000918:	2300      	movs	r3, #0
 800091a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800091c:	2300      	movs	r3, #0
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000924:	2307      	movs	r3, #7
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4619      	mov	r1, r3
 800092e:	4807      	ldr	r0, [pc, #28]	; (800094c <MX_SPI1_Init+0xa8>)
 8000930:	f001 f8c4 	bl	8001abc <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000934:	2100      	movs	r1, #0
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_SPI1_Init+0xa8>)
 8000938:	f7ff ff90 	bl	800085c <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 800093c:	4803      	ldr	r0, [pc, #12]	; (800094c <MX_SPI1_Init+0xa8>)
 800093e:	f7ff ffa0 	bl	8000882 <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3740      	adds	r7, #64	; 0x40
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40013000 	.word	0x40013000

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	void LedPulse();
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */
	TIM15 -> SR &= ~(TIM_SR_UIF);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	6113      	str	r3, [r2, #16]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40014000 	.word	0x40014000

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4907      	ldr	r1, [pc, #28]	; (8000a40 <__NVIC_EnableIRQ+0x38>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000e100 	.word	0xe000e100

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <LL_AHB2_GRP1_EnableClock>:
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000

08000b30 <LL_APB1_GRP1_EnableClock>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b3c:	4907      	ldr	r1, [pc, #28]	; (8000b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000

08000b60 <LL_APB2_GRP1_EnableClock>:
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000

08000b90 <LL_TIM_DisableARRPreload>:
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	601a      	str	r2, [r3, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d028      	beq.n	8000c12 <LL_TIM_OC_DisableFast+0x62>
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d023      	beq.n	8000c0e <LL_TIM_OC_DisableFast+0x5e>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b10      	cmp	r3, #16
 8000bca:	d01e      	beq.n	8000c0a <LL_TIM_OC_DisableFast+0x5a>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	2b40      	cmp	r3, #64	; 0x40
 8000bd0:	d019      	beq.n	8000c06 <LL_TIM_OC_DisableFast+0x56>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd8:	d013      	beq.n	8000c02 <LL_TIM_OC_DisableFast+0x52>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be0:	d00d      	beq.n	8000bfe <LL_TIM_OC_DisableFast+0x4e>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000be8:	d007      	beq.n	8000bfa <LL_TIM_OC_DisableFast+0x4a>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d101      	bne.n	8000bf6 <LL_TIM_OC_DisableFast+0x46>
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	e00e      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000bf6:	2308      	movs	r3, #8
 8000bf8:	e00c      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	e00a      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e008      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000c02:	2304      	movs	r3, #4
 8000c04:	e006      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e004      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e002      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e000      	b.n	8000c14 <LL_TIM_OC_DisableFast+0x64>
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3318      	adds	r3, #24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LL_TIM_OC_DisableFast+0x9c>)
 8000c20:	5cd3      	ldrb	r3, [r2, r3]
 8000c22:	440b      	add	r3, r1
 8000c24:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4908      	ldr	r1, [pc, #32]	; (8000c50 <LL_TIM_OC_DisableFast+0xa0>)
 8000c2e:	5ccb      	ldrb	r3, [r1, r3]
 8000c30:	4619      	mov	r1, r3
 8000c32:	2304      	movs	r3, #4
 8000c34:	408b      	lsls	r3, r1
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	601a      	str	r2, [r3, #0]

}
 8000c3e:	bf00      	nop
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	080025ac 	.word	0x080025ac
 8000c50:	080025b8 	.word	0x080025b8

08000c54 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d028      	beq.n	8000cb6 <LL_TIM_OC_EnablePreload+0x62>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	d023      	beq.n	8000cb2 <LL_TIM_OC_EnablePreload+0x5e>
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	2b10      	cmp	r3, #16
 8000c6e:	d01e      	beq.n	8000cae <LL_TIM_OC_EnablePreload+0x5a>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b40      	cmp	r3, #64	; 0x40
 8000c74:	d019      	beq.n	8000caa <LL_TIM_OC_EnablePreload+0x56>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c7c:	d013      	beq.n	8000ca6 <LL_TIM_OC_EnablePreload+0x52>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c84:	d00d      	beq.n	8000ca2 <LL_TIM_OC_EnablePreload+0x4e>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c8c:	d007      	beq.n	8000c9e <LL_TIM_OC_EnablePreload+0x4a>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c94:	d101      	bne.n	8000c9a <LL_TIM_OC_EnablePreload+0x46>
 8000c96:	2307      	movs	r3, #7
 8000c98:	e00e      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	e00c      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	e00a      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	e008      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	e006      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000caa:	2303      	movs	r3, #3
 8000cac:	e004      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <LL_TIM_OC_EnablePreload+0x64>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3318      	adds	r3, #24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LL_TIM_OC_EnablePreload+0x98>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	440b      	add	r3, r1
 8000cc8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <LL_TIM_OC_EnablePreload+0x9c>)
 8000cd2:	5ccb      	ldrb	r3, [r1, r3]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	080025ac 	.word	0x080025ac
 8000cf0:	080025b8 	.word	0x080025b8

08000cf4 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000d26:	f023 0307 	bic.w	r3, r3, #7
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	609a      	str	r2, [r3, #8]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	605a      	str	r2, [r3, #4]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	609a      	str	r2, [r3, #8]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4319      	orrs	r1, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	430b      	orrs	r3, r1
 8000da4:	431a      	orrs	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	609a      	str	r2, [r3, #8]
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f023 0208 	bic.w	r2, r3, #8
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	609a      	str	r2, [r3, #8]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000de2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	2220      	movs	r2, #32
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fb7a 	bl	80024f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fe8d 	bl	8000b30 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 124;
 8000e16:	237c      	movs	r3, #124	; 0x7c
 8000e18:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000e26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e30:	f000 ff2c 	bl	8001c8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000e34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e38:	f7ff feaa 	bl	8000b90 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e42:	f7ff ff67 	bl	8000d14 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8000e46:	2110      	movs	r1, #16
 8000e48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e4c:	f7ff ff02 	bl	8000c54 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000e50:	2360      	movs	r3, #96	; 0x60
 8000e52:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	461a      	mov	r2, r3
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e70:	f000 ff6a 	bl	8001d48 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8000e74:	2110      	movs	r1, #16
 8000e76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e7a:	f7ff fe99 	bl	8000bb0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM2, LL_TIM_OCREF_CLR_INT_NC);
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e84:	f7ff ff97 	bl	8000db6 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM2);
 8000e88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e8c:	f7ff ff32 	bl	8000cf4 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM2, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8000e90:	2300      	movs	r3, #0
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e9a:	f7ff ff73 	bl	8000d84 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ea4:	f7ff ff4b 	bl	8000d3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000eac:	f7ff ff5a 	bl	8000d64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fe25 	bl	8000b00 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <MX_TIM2_Init+0x104>)
 8000ed4:	f000 fa80 	bl	80013d8 <LL_GPIO_Init>

}
 8000ed8:	bf00      	nop
 8000eda:	3750      	adds	r7, #80	; 0x50
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	48000400 	.word	0x48000400

08000ee4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM15);
 8000ef8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000efc:	f7ff fe30 	bl	8000b60 <LL_APB2_GRP1_EnableClock>

  /* TIM15 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f00:	f7ff fd74 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fdc4 	bl	8000a98 <NVIC_EncodePriority>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4619      	mov	r1, r3
 8000f14:	2018      	movs	r0, #24
 8000f16:	f7ff fd95 	bl	8000a44 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000f1a:	2018      	movs	r0, #24
 8000f1c:	f7ff fd74 	bl	8000a08 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 32000;
 8000f28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000f2c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM15, &TIM_InitStruct);
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480a      	ldr	r0, [pc, #40]	; (8000f64 <MX_TIM15_Init+0x80>)
 8000f3c:	f000 fea6 	bl	8001c8c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM15);
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_TIM15_Init+0x80>)
 8000f42:	f7ff fe25 	bl	8000b90 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM15, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000f46:	2100      	movs	r1, #0
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <MX_TIM15_Init+0x80>)
 8000f4a:	f7ff fee3 	bl	8000d14 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM15, LL_TIM_TRGO_RESET);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_TIM15_Init+0x80>)
 8000f52:	f7ff fef4 	bl	8000d3e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM15);
 8000f56:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_TIM15_Init+0x80>)
 8000f58:	f7ff ff04 	bl	8000d64 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40014000 	.word	0x40014000

08000f68 <LL_RCC_SetUSARTClockSource>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <LL_RCC_SetUSARTClockSource+0x30>)
 8000f72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4905      	ldr	r1, [pc, #20]	; (8000f98 <LL_RCC_SetUSARTClockSource+0x30>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_AHB2_GRP1_EnableClock>:
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fa8:	4907      	ldr	r1, [pc, #28]	; (8000fc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	40021000 	.word	0x40021000

08000fcc <LL_APB2_GRP1_EnableClock>:
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000fe2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	40021000 	.word	0x40021000

08000ffc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
 8001070:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001072:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001076:	f7ff ff77 	bl	8000f68 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800107a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800107e:	f7ff ffa5 	bl	8000fcc <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff ff8a 	bl	8000f9c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001088:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800108c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800108e:	2302      	movs	r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800109e:	2307      	movs	r3, #7
 80010a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f000 f995 	bl	80013d8 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80010ae:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80010b2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010c0:	230c      	movs	r3, #12
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010c8:	2300      	movs	r3, #0
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4806      	ldr	r0, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0xa4>)
 80010d4:	f001 f97c 	bl	80023d0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_USART1_UART_Init+0xa4>)
 80010da:	f7ff ff9f 	bl	800101c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80010de:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_USART1_UART_Init+0xa4>)
 80010e0:	f7ff ff8c 	bl	8000ffc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3738      	adds	r7, #56	; 0x38
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40013800 	.word	0x40013800

080010f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f4:	f7ff fc68 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
  ldr r1, =_edata
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111e:	f001 f9f1 	bl	8002504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001122:	f7ff faed 	bl	8000700 <main>

08001126 <LoopForever>:

LoopForever:
    b LoopForever
 8001126:	e7fe      	b.n	8001126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001128:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800112c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001130:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001134:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 8001138:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800113c:	20000020 	.word	0x20000020

08001140 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001140:	e7fe      	b.n	8001140 <ADC1_IRQHandler>

08001142 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001142:	b480      	push	{r7}
 8001144:	b08b      	sub	sp, #44	; 0x2c
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001168:	2320      	movs	r3, #32
 800116a:	e003      	b.n	8001174 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fab3 f383 	clz	r3, r3
 8001172:	b2db      	uxtb	r3, r3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2103      	movs	r1, #3
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	401a      	ands	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	61fb      	str	r3, [r7, #28]
  return result;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001196:	2320      	movs	r3, #32
 8001198:	e003      	b.n	80011a2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	fab3 f383 	clz	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	fa01 f303 	lsl.w	r3, r1, r3
 80011aa:	431a      	orrs	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	372c      	adds	r7, #44	; 0x2c
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685a      	ldr	r2, [r3, #4]
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	401a      	ands	r2, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b08b      	sub	sp, #44	; 0x2c
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	613b      	str	r3, [r7, #16]
  return result;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001212:	2320      	movs	r3, #32
 8001214:	e003      	b.n	800121e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	fab3 f383 	clz	r3, r3
 800121c:	b2db      	uxtb	r3, r3
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2103      	movs	r1, #3
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	61fb      	str	r3, [r7, #28]
  return result;
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001240:	2320      	movs	r3, #32
 8001242:	e003      	b.n	800124c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	b2db      	uxtb	r3, r3
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800125a:	bf00      	nop
 800125c:	372c      	adds	r7, #44	; 0x2c
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001266:	b480      	push	{r7}
 8001268:	b08b      	sub	sp, #44	; 0x2c
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	613b      	str	r3, [r7, #16]
  return result;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800128c:	2320      	movs	r3, #32
 800128e:	e003      	b.n	8001298 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	fab3 f383 	clz	r3, r3
 8001296:	b2db      	uxtb	r3, r3
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2103      	movs	r1, #3
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	6a3b      	ldr	r3, [r7, #32]
 80012aa:	fa93 f3a3 	rbit	r3, r3
 80012ae:	61fb      	str	r3, [r7, #28]
  return result;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80012b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80012ba:	2320      	movs	r3, #32
 80012bc:	e003      	b.n	80012c6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	431a      	orrs	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	60da      	str	r2, [r3, #12]
}
 80012d4:	bf00      	nop
 80012d6:	372c      	adds	r7, #44	; 0x2c
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6a1a      	ldr	r2, [r3, #32]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	613b      	str	r3, [r7, #16]
  return result;
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001306:	2320      	movs	r3, #32
 8001308:	e003      	b.n	8001312 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	b2db      	uxtb	r3, r3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	210f      	movs	r1, #15
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	401a      	ands	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	fa93 f3a3 	rbit	r3, r3
 8001328:	61fb      	str	r3, [r7, #28]
  return result;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001334:	2320      	movs	r3, #32
 8001336:	e003      	b.n	8001340 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	fab3 f383 	clz	r3, r3
 800133e:	b2db      	uxtb	r3, r3
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800134e:	bf00      	nop
 8001350:	372c      	adds	r7, #44	; 0x2c
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800135a:	b480      	push	{r7}
 800135c:	b08b      	sub	sp, #44	; 0x2c
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	613b      	str	r3, [r7, #16]
  return result;
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001382:	2320      	movs	r3, #32
 8001384:	e003      	b.n	800138e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	210f      	movs	r1, #15
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	401a      	ands	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	fa93 f3a3 	rbit	r3, r3
 80013a6:	61fb      	str	r3, [r7, #28]
  return result;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80013b2:	2320      	movs	r3, #32
 80013b4:	e003      	b.n	80013be <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	431a      	orrs	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80013cc:	bf00      	nop
 80013ce:	372c      	adds	r7, #44	; 0x2c
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	fa93 f3a3 	rbit	r3, r3
 80013ee:	60fb      	str	r3, [r7, #12]
  return result;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <LL_GPIO_Init+0x26>
    return 32U;
 80013fa:	2320      	movs	r3, #32
 80013fc:	e003      	b.n	8001406 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fab3 f383 	clz	r3, r3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001408:	e048      	b.n	800149c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2101      	movs	r1, #1
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d03a      	beq.n	8001496 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d003      	beq.n	8001430 <LL_GPIO_Init+0x58>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10e      	bne.n	800144e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	461a      	mov	r2, r3
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fed7 	bl	80011ec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	461a      	mov	r2, r3
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff feb7 	bl	80011bc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	461a      	mov	r2, r3
 8001454:	69b9      	ldr	r1, [r7, #24]
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff05 	bl	8001266 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d111      	bne.n	8001488 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d807      	bhi.n	800147a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	461a      	mov	r2, r3
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff34 	bl	80012e0 <LL_GPIO_SetAFPin_0_7>
 8001478:	e006      	b.n	8001488 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	461a      	mov	r2, r3
 8001480:	69b9      	ldr	r1, [r7, #24]
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff69 	bl	800135a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	461a      	mov	r2, r3
 800148e:	69b9      	ldr	r1, [r7, #24]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe56 	bl	8001142 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3301      	adds	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	fa22 f303 	lsr.w	r3, r2, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1af      	bne.n	800140a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3720      	adds	r7, #32
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <LL_RCC_HSI_IsReady>:
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <LL_RCC_HSI_IsReady+0x24>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c4:	d101      	bne.n	80014ca <LL_RCC_HSI_IsReady+0x16>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <LL_RCC_HSI_IsReady+0x18>
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <LL_RCC_LSE_IsReady>:
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <LL_RCC_LSE_IsReady+0x24>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d101      	bne.n	80014f2 <LL_RCC_LSE_IsReady+0x16>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <LL_RCC_LSE_IsReady+0x18>
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000

08001504 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b08      	cmp	r3, #8
 8001512:	d101      	bne.n	8001518 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	40021000 	.word	0x40021000

08001528 <LL_RCC_MSI_GetRange>:
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <LL_RCC_MSI_GetRange+0x18>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001552:	4618      	mov	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_GetSysClkSource>:
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <LL_RCC_GetSysClkSource+0x18>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_GetAHBPrescaler>:
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <LL_RCC_GetAHBPrescaler+0x18>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <LL_RCC_GetAPB1Prescaler>:
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000

080015b4 <LL_RCC_GetAPB2Prescaler>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000

080015d0 <LL_RCC_GetUSARTClockSource>:
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_RCC_GetUSARTClockSource+0x24>)
 80015da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	401a      	ands	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	4313      	orrs	r3, r2
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_PLL_GetMainSource>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LL_RCC_PLL_GetMainSource+0x18>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	f003 0303 	and.w	r3, r3, #3
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <LL_RCC_PLL_GetN>:
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <LL_RCC_PLL_GetN+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000

08001630 <LL_RCC_PLL_GetR>:
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <LL_RCC_PLL_GetR+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <LL_RCC_PLL_GetDivider>:
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <LL_RCC_PLL_GetDivider+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000

08001668 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d133      	bne.n	80016e2 <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa8 	bl	80015d0 <LL_RCC_GetUSARTClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8001686:	2b03      	cmp	r3, #3
 8001688:	d875      	bhi.n	8001776 <LL_RCC_GetUSARTClockFreq+0x10e>
 800168a:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <LL_RCC_GetUSARTClockFreq+0x28>)
 800168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001690:	080016cb 	.word	0x080016cb
 8001694:	080016a1 	.word	0x080016a1
 8001698:	080016a9 	.word	0x080016a9
 800169c:	080016b9 	.word	0x080016b9
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80016a0:	f000 f87c 	bl	800179c <RCC_GetSystemClockFreq>
 80016a4:	60f8      	str	r0, [r7, #12]
        break;
 80016a6:	e071      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80016a8:	f7ff ff04 	bl	80014b4 <LL_RCC_HSI_IsReady>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <LL_RCC_GetUSARTClockFreq+0x112>
        {
          usart_frequency = HSI_VALUE;
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <LL_RCC_GetUSARTClockFreq+0x130>)
 80016b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016b6:	e060      	b.n	800177a <LL_RCC_GetUSARTClockFreq+0x112>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80016b8:	f7ff ff10 	bl	80014dc <LL_RCC_LSE_IsReady>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d05d      	beq.n	800177e <LL_RCC_GetUSARTClockFreq+0x116>
        {
          usart_frequency = LSE_VALUE;
 80016c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016c6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80016c8:	e059      	b.n	800177e <LL_RCC_GetUSARTClockFreq+0x116>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80016ca:	f000 f867 	bl	800179c <RCC_GetSystemClockFreq>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f8f3 	bl	80018bc <RCC_GetHCLKClockFreq>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f919 	bl	8001910 <RCC_GetPCLK2ClockFreq>
 80016de:	60f8      	str	r0, [r7, #12]
        break;
 80016e0:	e054      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d151      	bne.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff71 	bl	80015d0 <LL_RCC_GetUSARTClockSource>
 80016ee:	4603      	mov	r3, r0
 80016f0:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d844      	bhi.n	8001782 <LL_RCC_GetUSARTClockFreq+0x11a>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <LL_RCC_GetUSARTClockFreq+0x98>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	0800175f 	.word	0x0800175f
 8001704:	08001783 	.word	0x08001783
 8001708:	08001783 	.word	0x08001783
 800170c:	08001783 	.word	0x08001783
 8001710:	08001735 	.word	0x08001735
 8001714:	08001783 	.word	0x08001783
 8001718:	08001783 	.word	0x08001783
 800171c:	08001783 	.word	0x08001783
 8001720:	0800173d 	.word	0x0800173d
 8001724:	08001783 	.word	0x08001783
 8001728:	08001783 	.word	0x08001783
 800172c:	08001783 	.word	0x08001783
 8001730:	0800174d 	.word	0x0800174d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001734:	f000 f832 	bl	800179c <RCC_GetSystemClockFreq>
 8001738:	60f8      	str	r0, [r7, #12]
        break;
 800173a:	e027      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800173c:	f7ff feba 	bl	80014b4 <LL_RCC_HSI_IsReady>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01f      	beq.n	8001786 <LL_RCC_GetUSARTClockFreq+0x11e>
        {
          usart_frequency = HSI_VALUE;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <LL_RCC_GetUSARTClockFreq+0x130>)
 8001748:	60fb      	str	r3, [r7, #12]
        }
        break;
 800174a:	e01c      	b.n	8001786 <LL_RCC_GetUSARTClockFreq+0x11e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800174c:	f7ff fec6 	bl	80014dc <LL_RCC_LSE_IsReady>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <LL_RCC_GetUSARTClockFreq+0x122>
        {
          usart_frequency = LSE_VALUE;
 8001756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800175c:	e015      	b.n	800178a <LL_RCC_GetUSARTClockFreq+0x122>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800175e:	f000 f81d 	bl	800179c <RCC_GetSystemClockFreq>
 8001762:	4603      	mov	r3, r0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f8a9 	bl	80018bc <RCC_GetHCLKClockFreq>
 800176a:	4603      	mov	r3, r0
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f8bb 	bl	80018e8 <RCC_GetPCLK1ClockFreq>
 8001772:	60f8      	str	r0, [r7, #12]
        break;
 8001774:	e00a      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001776:	bf00      	nop
 8001778:	e008      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800177a:	bf00      	nop
 800177c:	e006      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800177e:	bf00      	nop
 8001780:	e004      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>

      default:
        break;
 8001782:	bf00      	nop
 8001784:	e002      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 8001786:	bf00      	nop
 8001788:	e000      	b.n	800178c <LL_RCC_GetUSARTClockFreq+0x124>
        break;
 800178a:	bf00      	nop
          break;
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	00f42400 	.word	0x00f42400

0800179c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80017a2:	f7ff fedd 	bl	8001560 <LL_RCC_GetSysClkSource>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d851      	bhi.n	8001850 <RCC_GetSystemClockFreq+0xb4>
 80017ac:	a201      	add	r2, pc, #4	; (adr r2, 80017b4 <RCC_GetSystemClockFreq+0x18>)
 80017ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b2:	bf00      	nop
 80017b4:	080017e9 	.word	0x080017e9
 80017b8:	08001851 	.word	0x08001851
 80017bc:	08001851 	.word	0x08001851
 80017c0:	08001851 	.word	0x08001851
 80017c4:	0800183d 	.word	0x0800183d
 80017c8:	08001851 	.word	0x08001851
 80017cc:	08001851 	.word	0x08001851
 80017d0:	08001851 	.word	0x08001851
 80017d4:	08001843 	.word	0x08001843
 80017d8:	08001851 	.word	0x08001851
 80017dc:	08001851 	.word	0x08001851
 80017e0:	08001851 	.word	0x08001851
 80017e4:	08001849 	.word	0x08001849
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80017e8:	f7ff fe8c 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d111      	bne.n	8001816 <RCC_GetSystemClockFreq+0x7a>
 80017f2:	f7ff fe87 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <RCC_GetSystemClockFreq+0x6a>
 80017fc:	f7ff fe94 	bl	8001528 <LL_RCC_MSI_GetRange>
 8001800:	4603      	mov	r3, r0
 8001802:	0a1b      	lsrs	r3, r3, #8
 8001804:	e003      	b.n	800180e <RCC_GetSystemClockFreq+0x72>
 8001806:	f7ff fe9d 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 800180a:	4603      	mov	r3, r0
 800180c:	0a1b      	lsrs	r3, r3, #8
 800180e:	4a28      	ldr	r2, [pc, #160]	; (80018b0 <RCC_GetSystemClockFreq+0x114>)
 8001810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001814:	e010      	b.n	8001838 <RCC_GetSystemClockFreq+0x9c>
 8001816:	f7ff fe75 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <RCC_GetSystemClockFreq+0x8e>
 8001820:	f7ff fe82 	bl	8001528 <LL_RCC_MSI_GetRange>
 8001824:	4603      	mov	r3, r0
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	e003      	b.n	8001832 <RCC_GetSystemClockFreq+0x96>
 800182a:	f7ff fe8b 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 800182e:	4603      	mov	r3, r0
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <RCC_GetSystemClockFreq+0x114>)
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800183a:	e033      	b.n	80018a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <RCC_GetSystemClockFreq+0x118>)
 800183e:	607b      	str	r3, [r7, #4]
      break;
 8001840:	e030      	b.n	80018a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001842:	4b1d      	ldr	r3, [pc, #116]	; (80018b8 <RCC_GetSystemClockFreq+0x11c>)
 8001844:	607b      	str	r3, [r7, #4]
      break;
 8001846:	e02d      	b.n	80018a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001848:	f000 f876 	bl	8001938 <RCC_PLL_GetFreqDomain_SYS>
 800184c:	6078      	str	r0, [r7, #4]
      break;
 800184e:	e029      	b.n	80018a4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001850:	f7ff fe58 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d111      	bne.n	800187e <RCC_GetSystemClockFreq+0xe2>
 800185a:	f7ff fe53 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <RCC_GetSystemClockFreq+0xd2>
 8001864:	f7ff fe60 	bl	8001528 <LL_RCC_MSI_GetRange>
 8001868:	4603      	mov	r3, r0
 800186a:	0a1b      	lsrs	r3, r3, #8
 800186c:	e003      	b.n	8001876 <RCC_GetSystemClockFreq+0xda>
 800186e:	f7ff fe69 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 8001872:	4603      	mov	r3, r0
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <RCC_GetSystemClockFreq+0x114>)
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	e010      	b.n	80018a0 <RCC_GetSystemClockFreq+0x104>
 800187e:	f7ff fe41 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <RCC_GetSystemClockFreq+0xf6>
 8001888:	f7ff fe4e 	bl	8001528 <LL_RCC_MSI_GetRange>
 800188c:	4603      	mov	r3, r0
 800188e:	091b      	lsrs	r3, r3, #4
 8001890:	e003      	b.n	800189a <RCC_GetSystemClockFreq+0xfe>
 8001892:	f7ff fe57 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 8001896:	4603      	mov	r3, r0
 8001898:	091b      	lsrs	r3, r3, #4
 800189a:	4a05      	ldr	r2, [pc, #20]	; (80018b0 <RCC_GetSystemClockFreq+0x114>)
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80018a2:	bf00      	nop
  }

  return frequency;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	0800257c 	.word	0x0800257c
 80018b4:	00f42400 	.word	0x00f42400
 80018b8:	007a1200 	.word	0x007a1200

080018bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80018c4:	f7ff fe5a 	bl	800157c <LL_RCC_GetAHBPrescaler>
 80018c8:	4603      	mov	r3, r0
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <RCC_GetHCLKClockFreq+0x28>)
 80018d2:	5cd3      	ldrb	r3, [r2, r3]
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	40d3      	lsrs	r3, r2
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	08002564 	.word	0x08002564

080018e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80018f0:	f7ff fe52 	bl	8001598 <LL_RCC_GetAPB1Prescaler>
 80018f4:	4603      	mov	r3, r0
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <RCC_GetPCLK1ClockFreq+0x24>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	40d3      	lsrs	r3, r2
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08002574 	.word	0x08002574

08001910 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001918:	f7ff fe4c 	bl	80015b4 <LL_RCC_GetAPB2Prescaler>
 800191c:	4603      	mov	r3, r0
 800191e:	0adb      	lsrs	r3, r3, #11
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <RCC_GetPCLK2ClockFreq+0x24>)
 8001922:	5cd3      	ldrb	r3, [r2, r3]
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	40d3      	lsrs	r3, r2
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	08002574 	.word	0x08002574

08001938 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800193e:	f7ff fe5b 	bl	80015f8 <LL_RCC_PLL_GetMainSource>
 8001942:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d036      	beq.n	80019b8 <RCC_PLL_GetFreqDomain_SYS+0x80>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d836      	bhi.n	80019be <RCC_PLL_GetFreqDomain_SYS+0x86>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d003      	beq.n	800195e <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d02a      	beq.n	80019b2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 800195c:	e02f      	b.n	80019be <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800195e:	f7ff fdd1 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d111      	bne.n	800198c <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001968:	f7ff fdcc 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d004      	beq.n	800197c <RCC_PLL_GetFreqDomain_SYS+0x44>
 8001972:	f7ff fdd9 	bl	8001528 <LL_RCC_MSI_GetRange>
 8001976:	4603      	mov	r3, r0
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	e003      	b.n	8001984 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 800197c:	f7ff fde2 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 8001980:	4603      	mov	r3, r0
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	e010      	b.n	80019ae <RCC_PLL_GetFreqDomain_SYS+0x76>
 800198c:	f7ff fdba 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <RCC_PLL_GetFreqDomain_SYS+0x68>
 8001996:	f7ff fdc7 	bl	8001528 <LL_RCC_MSI_GetRange>
 800199a:	4603      	mov	r3, r0
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	e003      	b.n	80019a8 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80019a0:	f7ff fdd0 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 80019a4:	4603      	mov	r3, r0
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	4a26      	ldr	r2, [pc, #152]	; (8001a44 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80019b0:	e02f      	b.n	8001a12 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80019b2:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80019b4:	607b      	str	r3, [r7, #4]
      break;
 80019b6:	e02c      	b.n	8001a12 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80019ba:	607b      	str	r3, [r7, #4]
      break;
 80019bc:	e029      	b.n	8001a12 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80019be:	f7ff fda1 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80019c8:	f7ff fd9c 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d004      	beq.n	80019dc <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80019d2:	f7ff fda9 	bl	8001528 <LL_RCC_MSI_GetRange>
 80019d6:	4603      	mov	r3, r0
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	e003      	b.n	80019e4 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80019dc:	f7ff fdb2 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 80019e0:	4603      	mov	r3, r0
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	e010      	b.n	8001a0e <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80019ec:	f7ff fd8a 	bl	8001504 <LL_RCC_MSI_IsEnabledRangeSelect>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80019f6:	f7ff fd97 	bl	8001528 <LL_RCC_MSI_GetRange>
 80019fa:	4603      	mov	r3, r0
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	e003      	b.n	8001a08 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8001a00:	f7ff fda0 	bl	8001544 <LL_RCC_MSI_GetRangeAfterStandby>
 8001a04:	4603      	mov	r3, r0
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001a10:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001a12:	f7ff fe1b 	bl	800164c <LL_RCC_PLL_GetDivider>
 8001a16:	4603      	mov	r3, r0
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fbb2 f4f3 	udiv	r4, r2, r3
 8001a22:	f7ff fdf7 	bl	8001614 <LL_RCC_PLL_GetN>
 8001a26:	4603      	mov	r3, r0
 8001a28:	fb03 f404 	mul.w	r4, r3, r4
 8001a2c:	f7ff fe00 	bl	8001630 <LL_RCC_PLL_GetR>
 8001a30:	4603      	mov	r3, r0
 8001a32:	0e5b      	lsrs	r3, r3, #25
 8001a34:	3301      	adds	r3, #1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd90      	pop	{r4, r7, pc}
 8001a44:	0800257c 	.word	0x0800257c
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <LL_SPI_IsEnabled>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	2b40      	cmp	r3, #64	; 0x40
 8001a62:	d101      	bne.n	8001a68 <LL_SPI_IsEnabled+0x18>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <LL_SPI_IsEnabled+0x1a>
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <LL_SPI_SetRxFIFOThreshold>:
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	605a      	str	r2, [r3, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_SPI_SetCRCPolynomial>:
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	611a      	str	r2, [r3, #16]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffc0 	bl	8001a50 <LL_SPI_IsEnabled>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d145      	bne.n	8001b62 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ade:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	6852      	ldr	r2, [r2, #4]
 8001aea:	4311      	orrs	r1, r2
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	68d2      	ldr	r2, [r2, #12]
 8001af0:	4311      	orrs	r1, r2
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	6912      	ldr	r2, [r2, #16]
 8001af6:	4311      	orrs	r1, r2
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	6952      	ldr	r2, [r2, #20]
 8001afc:	4311      	orrs	r1, r2
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	6992      	ldr	r2, [r2, #24]
 8001b02:	4311      	orrs	r1, r2
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	69d2      	ldr	r2, [r2, #28]
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	6a12      	ldr	r2, [r2, #32]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b1e:	f023 0304 	bic.w	r3, r3, #4
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	6891      	ldr	r1, [r2, #8]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	6952      	ldr	r2, [r2, #20]
 8001b2a:	0c12      	lsrs	r2, r2, #16
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b3c:	d204      	bcs.n	8001b48 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8001b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff ff97 	bl	8001a76 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b50:	d105      	bne.n	8001b5e <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff9f 	bl	8001a9c <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <LL_TIM_SetPrescaler>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_TIM_SetAutoReload>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_TIM_SetRepetitionCounter>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_TIM_OC_SetCompareCH1>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <LL_TIM_OC_SetCompareCH2>:
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_TIM_OC_SetCompareCH3>:
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_TIM_OC_SetCompareCH4>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_TIM_OC_SetCompareCH5>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_TIM_OC_SetCompareCH6>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	615a      	str	r2, [r3, #20]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <LL_TIM_Init+0xb0>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d003      	beq.n	8001cac <LL_TIM_Init+0x20>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001caa:	d106      	bne.n	8001cba <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <LL_TIM_Init+0xb0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d00b      	beq.n	8001cda <LL_TIM_Init+0x4e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc8:	d007      	beq.n	8001cda <LL_TIM_Init+0x4e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a1c      	ldr	r2, [pc, #112]	; (8001d40 <LL_TIM_Init+0xb4>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d003      	beq.n	8001cda <LL_TIM_Init+0x4e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <LL_TIM_Init+0xb8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d106      	bne.n	8001ce8 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff47 	bl	8001b88 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff33 	bl	8001b6c <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <LL_TIM_Init+0xb0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <LL_TIM_Init+0x92>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <LL_TIM_Init+0xb4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d003      	beq.n	8001d1e <LL_TIM_Init+0x92>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <LL_TIM_Init+0xb8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff3d 	bl	8001ba4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff9e 	bl	8001c6c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40014000 	.word	0x40014000
 8001d44:	40014400 	.word	0x40014400

08001d48 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d5e:	d045      	beq.n	8001dec <LL_TIM_OC_Init+0xa4>
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d66:	d848      	bhi.n	8001dfa <LL_TIM_OC_Init+0xb2>
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d036      	beq.n	8001dde <LL_TIM_OC_Init+0x96>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d840      	bhi.n	8001dfa <LL_TIM_OC_Init+0xb2>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7e:	d027      	beq.n	8001dd0 <LL_TIM_OC_Init+0x88>
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d86:	d838      	bhi.n	8001dfa <LL_TIM_OC_Init+0xb2>
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d8e:	d018      	beq.n	8001dc2 <LL_TIM_OC_Init+0x7a>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d96:	d830      	bhi.n	8001dfa <LL_TIM_OC_Init+0xb2>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d003      	beq.n	8001da6 <LL_TIM_OC_Init+0x5e>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d007      	beq.n	8001db4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001da4:	e029      	b.n	8001dfa <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f82d 	bl	8001e08 <OC1Config>
 8001dae:	4603      	mov	r3, r0
 8001db0:	75fb      	strb	r3, [r7, #23]
      break;
 8001db2:	e023      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f89a 	bl	8001ef0 <OC2Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc0:	e01c      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f90b 	bl	8001fe0 <OC3Config>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8001dce:	e015      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 f97c 	bl	80020d0 <OC4Config>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	75fb      	strb	r3, [r7, #23]
      break;
 8001ddc:	e00e      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f9d5 	bl	8002190 <OC5Config>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
      break;
 8001dea:	e007      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 fa26 	bl	8002240 <OC6Config>
 8001df4:	4603      	mov	r3, r0
 8001df6:	75fb      	strb	r3, [r7, #23]
      break;
 8001df8:	e000      	b.n	8001dfc <LL_TIM_OC_Init+0xb4>
      break;
 8001dfa:	bf00      	nop
  }

  return result;
 8001dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	f023 0201 	bic.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f023 0202 	bic.w	r2, r3, #2
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f023 0201 	bic.w	r2, r3, #1
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <OC1Config+0xdc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <OC1Config+0x76>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <OC1Config+0xe0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d003      	beq.n	8001e7e <OC1Config+0x76>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <OC1Config+0xe4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11e      	bne.n	8001ebc <OC1Config+0xb4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f023 0208 	bic.w	r2, r3, #8
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f023 0204 	bic.w	r2, r3, #4
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fe76 	bl	8001bc0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40014000 	.word	0x40014000
 8001eec:	40014400 	.word	0x40014400

08001ef0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f023 0210 	bic.w	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	0212      	lsls	r2, r2, #8
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f023 0220 	bic.w	r2, r3, #32
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0210 	bic.w	r2, r3, #16
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <OC2Config+0xe4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d007      	beq.n	8001f6c <OC2Config+0x7c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <OC2Config+0xe8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d003      	beq.n	8001f6c <OC2Config+0x7c>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <OC2Config+0xec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d11f      	bne.n	8001fac <OC2Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	019b      	lsls	r3, r3, #6
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	019b      	lsls	r3, r3, #6
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fe0c 	bl	8001bdc <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400

08001fe0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	4313      	orrs	r3, r2
 8002030:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4313      	orrs	r3, r2
 8002040:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <OC3Config+0xe4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <OC3Config+0x7a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a1e      	ldr	r2, [pc, #120]	; (80020c8 <OC3Config+0xe8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d003      	beq.n	800205a <OC3Config+0x7a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a1d      	ldr	r2, [pc, #116]	; (80020cc <OC3Config+0xec>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d11f      	bne.n	800209a <OC3Config+0xba>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4313      	orrs	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	029b      	lsls	r3, r3, #10
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	011b      	lsls	r3, r3, #4
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fda3 	bl	8001bf8 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40014000 	.word	0x40014000
 80020cc:	40014400 	.word	0x40014400

080020d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	0212      	lsls	r2, r2, #8
 8002110:	4313      	orrs	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	031b      	lsls	r3, r3, #12
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	031b      	lsls	r3, r3, #12
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <OC4Config+0xb4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d007      	beq.n	800214c <OC4Config+0x7c>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <OC4Config+0xb8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <OC4Config+0x7c>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <OC4Config+0xbc>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d107      	bne.n	800215c <OC4Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	019b      	lsls	r3, r3, #6
 8002158:	4313      	orrs	r3, r2
 800215a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff fd50 	bl	8001c14 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012c00 	.word	0x40012c00
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400

08002190 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <OC5Config+0xa4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d007      	beq.n	80021fc <OC5Config+0x6c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <OC5Config+0xa8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d003      	beq.n	80021fc <OC5Config+0x6c>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a11      	ldr	r2, [pc, #68]	; (800223c <OC5Config+0xac>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d109      	bne.n	8002210 <OC5Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff fd07 	bl	8001c30 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40012c00 	.word	0x40012c00
 8002238:	40014000 	.word	0x40014000
 800223c:	40014400 	.word	0x40014400

08002240 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	0212      	lsls	r2, r2, #8
 8002272:	4313      	orrs	r3, r2
 8002274:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	051b      	lsls	r3, r3, #20
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	4313      	orrs	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <OC6Config+0xa4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <OC6Config+0x6e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <OC6Config+0xa8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <OC6Config+0x6e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a10      	ldr	r2, [pc, #64]	; (80022ec <OC6Config+0xac>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d109      	bne.n	80022c2 <OC6Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	029b      	lsls	r3, r3, #10
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fcbe 	bl	8001c50 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40012c00 	.word	0x40012c00
 80022e8:	40014000 	.word	0x40014000
 80022ec:	40014400 	.word	0x40014400

080022f0 <LL_USART_IsEnabled>:
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <LL_USART_IsEnabled+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_USART_IsEnabled+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_USART_SetStopBitsLength>:
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_USART_SetHWFlowCtrl>:
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	609a      	str	r2, [r3, #8]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <LL_USART_SetBaudRate>:
{
 8002362:	b480      	push	{r7}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002376:	d11a      	bne.n	80023ae <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	005a      	lsls	r2, r3, #1
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	441a      	add	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	b29b      	uxth	r3, r3
 800238a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	b29b      	uxth	r3, r3
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	60da      	str	r2, [r3, #12]
}
 80023ac:	e00a      	b.n	80023c4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	085a      	lsrs	r2, r3, #1
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	441a      	add	r2, r3
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023bc:	b29b      	uxth	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	60da      	str	r2, [r3, #12]
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ff84 	bl	80022f0 <LL_USART_IsEnabled>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d13f      	bne.n	800246e <LL_USART_Init+0x9e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <LL_USART_Init+0xa8>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	6851      	ldr	r1, [r2, #4]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	68d2      	ldr	r2, [r2, #12]
 80023fe:	4311      	orrs	r1, r2
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	6912      	ldr	r2, [r2, #16]
 8002404:	4311      	orrs	r1, r2
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	6992      	ldr	r2, [r2, #24]
 800240a:	430a      	orrs	r2, r1
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4619      	mov	r1, r3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff ff7c 	bl	8002316 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff89 	bl	800233c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a13      	ldr	r2, [pc, #76]	; (800247c <LL_USART_Init+0xac>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d104      	bne.n	800243c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002432:	2003      	movs	r0, #3
 8002434:	f7ff f918 	bl	8001668 <LL_RCC_GetUSARTClockFreq>
 8002438:	60b8      	str	r0, [r7, #8]
 800243a:	e007      	b.n	800244c <LL_USART_Init+0x7c>
    }
    else if (USARTx == USART2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <LL_USART_Init+0xb0>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d103      	bne.n	800244c <LL_USART_Init+0x7c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002444:	200c      	movs	r0, #12
 8002446:	f7ff f90f 	bl	8001668 <LL_RCC_GetUSARTClockFreq>
 800244a:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <LL_USART_Init+0x9e>
        && (USART_InitStruct->BaudRate != 0U))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <LL_USART_Init+0x9e>
    {
      status = SUCCESS;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002466:	68b9      	ldr	r1, [r7, #8]
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff7a 	bl	8002362 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800246e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	efff69f3 	.word	0xefff69f3
 800247c:	40013800 	.word	0x40013800
 8002480:	40004400 	.word	0x40004400

08002484 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <LL_InitTick+0x30>)
 8002498:	3b01      	subs	r3, #1
 800249a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <LL_InitTick+0x30>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <LL_InitTick+0x30>)
 80024a4:	2205      	movs	r2, #5
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80024c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ffdd 	bl	8002484 <LL_InitTick>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <LL_SetSystemCoreClock+0x1c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000000 	.word	0x20000000

080024f4 <memset>:
 80024f4:	4402      	add	r2, r0
 80024f6:	4603      	mov	r3, r0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <memset+0xa>
 80024fc:	4770      	bx	lr
 80024fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002502:	e7f9      	b.n	80024f8 <memset+0x4>

08002504 <__libc_init_array>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	4d0d      	ldr	r5, [pc, #52]	; (800253c <__libc_init_array+0x38>)
 8002508:	4c0d      	ldr	r4, [pc, #52]	; (8002540 <__libc_init_array+0x3c>)
 800250a:	1b64      	subs	r4, r4, r5
 800250c:	10a4      	asrs	r4, r4, #2
 800250e:	2600      	movs	r6, #0
 8002510:	42a6      	cmp	r6, r4
 8002512:	d109      	bne.n	8002528 <__libc_init_array+0x24>
 8002514:	4d0b      	ldr	r5, [pc, #44]	; (8002544 <__libc_init_array+0x40>)
 8002516:	4c0c      	ldr	r4, [pc, #48]	; (8002548 <__libc_init_array+0x44>)
 8002518:	f000 f818 	bl	800254c <_init>
 800251c:	1b64      	subs	r4, r4, r5
 800251e:	10a4      	asrs	r4, r4, #2
 8002520:	2600      	movs	r6, #0
 8002522:	42a6      	cmp	r6, r4
 8002524:	d105      	bne.n	8002532 <__libc_init_array+0x2e>
 8002526:	bd70      	pop	{r4, r5, r6, pc}
 8002528:	f855 3b04 	ldr.w	r3, [r5], #4
 800252c:	4798      	blx	r3
 800252e:	3601      	adds	r6, #1
 8002530:	e7ee      	b.n	8002510 <__libc_init_array+0xc>
 8002532:	f855 3b04 	ldr.w	r3, [r5], #4
 8002536:	4798      	blx	r3
 8002538:	3601      	adds	r6, #1
 800253a:	e7f2      	b.n	8002522 <__libc_init_array+0x1e>
 800253c:	080025c4 	.word	0x080025c4
 8002540:	080025c4 	.word	0x080025c4
 8002544:	080025c4 	.word	0x080025c4
 8002548:	080025c8 	.word	0x080025c8

0800254c <_init>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	bf00      	nop
 8002550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002552:	bc08      	pop	{r3}
 8002554:	469e      	mov	lr, r3
 8002556:	4770      	bx	lr

08002558 <_fini>:
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	bf00      	nop
 800255c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800255e:	bc08      	pop	{r3}
 8002560:	469e      	mov	lr, r3
 8002562:	4770      	bx	lr
