TP Système à µprocesseur 3DN

Professeur : M. Fiack

Groupe : Valentin Lejars/ Arthur Geslin/ Yann Laloux
-----------------------------------------------------------------------
Ci-dessous figure les réponses aux questions qui sont posées pendant le déroulé du TP

///1 Saisie du Schéma
//1.1 Création de la structure du projet
//1.2 Le microcontroleur sous KiCAD

1.2.13: PB9 est la pin du BOOT0. En la reliant à la masse on force le BOOT0 à 0

1.2.14: Les composants L1, C5 et C7 ont pour but de filtrer l'alimentation pour la rendre propre pour les autres composants.

//1.3 Le reste du schéma

1.3.3: Les valeurs des condensateurs (1µF) sont indiqués à la page 3/17 de la datasheet du BU33SD5WG-TR.

1.3.5: Les valeurs des condensateurs de Bypass 0.1 µF (ceramic) and 10 µF (tantalum) sont indiqués à la page 25/49 de la datasheet du MCP4801.
Ils sont utilisés pour minimiser les effets des sources de bruit. 

1.3.6: La broche nCS est la pin d'entrée du ChipSelect qui requière une activation basse pour activer l'horloge série et les fonctions de data.

1.3.7: La broche nLDACb(Latch DAC synchronization input) est utilisée pour transférer l'entrée latch register au DAC register.
Quand le pin est à l'état bas, VOUT est mis à jour avec le contenu de l'input register content. 
Le pin peut être lié à l'état bas (VSS) si on préfère que la mise à jour du VOUT se fasse sur front montant du pin CS.
Le pin peut être commandé par un outil de control externe comme un pin d'entrée/sortie de µcontroleur. 

1.3.8: Le signal MISO n'est pas utilisé car le DAC ne renvoit pas de données

1.3.10: Les indications du pinout du connecteur SWD se trouvent sur la datasheet de la sonde

///2 Routage du circuit
//2.1 Placement des composants
//2.2 Routage
//2.3 Génération des fichiers de fabrication

///3 Écriture du firmware
//3.1 Activation des LL drivers

3.1.2:
La principale différence réside dans le niveau d'abstraction et de contrôle offert par chaque interface. HAL offre une abstraction plus élevée et plus conviviale, tandis que LL offre un contrôle plus fin et une utilisation plus directe des périphériques matériels. Le choix entre HAL et IL dépend souvent des besoins spécifiques du projet, de la familiarité du développeur avec chaque interface et des performances / ressources requises. 
Dans notre cas on a choisi LL pour une optimisation maximale car en HAL nous étions déjà presque en limite de mémoire (on passe de 96 à 76% d’utilisation de la RAM).
3.1.4/3.1.5:
`__STATIC_INLINE` est une directive de préprocesseur souvent utilisée dans le code C.. Elle est couramment rencontrée dans les environnements embarqués, notamment lors de la programmation des microcontrôleurs STM32 avec le framework STM32Cube HAL (Hardware Abstraction Layer) ou LL (Low Level).
- **STATIC**:Une fonction statique est accessible uniquement à partir du fichier dans lequel elle est déclarée, elle ne peut pas être utilisée par d'autres fichiers source.
- **INLINE**: Cette directive indique que la fonction doit être en ligne. Une fonction en ligne est une suggestion pour le compilateur de copier le corps de la fonction à chaque endroit où elle est appelée plutôt que de générer un appel de fonction.
Ainsi, `__STATIC_INLINE` combine les avantages de deux directives :
- `STATIC` : La fonction est limitée à une portée de fichier pour éviter les conflits de noms.
- `INLINE` : Le corps de la fonction sera copié à chaque appel, ce qui peut améliorer les performances en évitant les frais généraux des appels de fonction.
En pratique, `__STATIC_INLINE` est souvent utilisé pour définir des fonctions dans des fichiers d'en-tête afin de permettre aux fonctions d'être utilisées dans plusieurs fichiers source sans provoquer de conflits de symboles, tout en permettant également une optimisation de la performance grâce à l'inlining.

//3.2 LED simple
3.2.1: 
Le timer 2 est configuré pour générer une PWM sur le canal 1 avec une période de compteur de 255 (résolution de 8 bits).
3.2.2:
Fréquence du compteur = fréquence d’horloge du timer/ Fréquence  dedécoupage cible x Counter périod -1
Prescaler= (32 000 000 / 1 000 x 255) - 1 = 124
Pour obtenir une fréquence de 1 kHz on a un prescaler de 124

